---
- name: Find installation disk
  ansible.builtin.shell:
    cmd: |
      lsblk -b --json | \
        jq '[ .blockdevices[] | select (.type == "disk" and .ro == false and .size > (30 * 1024 * 1024 * 1024)) ]'
  register: installation_disk_result
  changed_when: false

- name: Set installation disk
  ansible.builtin.set_fact:
    installation_disk: "{{ installation_disk_result.stdout|from_json }}"

- name: Fail when unable to determine installation disk
  ansible.builtin.fail:
    msg: "Could not determine installation disk."
  when: installation_disk | length != 1

- name: Set installation disk
  ansible.builtin.set_fact:
    installation_disk: "{{ installation_disk[0] }}"

- name: Combine Ansible device info
  ansible.builtin.set_fact:
    installation_disk: "{{ installation_disk | ansible.builtin.combine(hostvars[inventory_hostname].ansible_devices[installation_disk.name]) }}"

- name: Show installation disk
  ansible.builtin.debug:
    msg: "Installation disk: {{ installation_disk }}."

- name: Set installation device path
  ansible.builtin.set_fact:
    installation_device: "/dev/{{ installation_disk.name }}"

- name: Show installation device
  ansible.builtin.debug:
    msg: "Installation will continue on {{ installation_device }}."

- name: Clean the device
  ansible.builtin.shell:
    cmd: |
      sgdisk -Z {{ installation_device }}
  changed_when: false

- name: Execute partprobe
  ansible.builtin.shell:
    cmd: |
      partprobe
  changed_when: false

- name: Set EFI partition info
  ansible.builtin.set_fact:
    efi_start_sector: "{{ start_sector }}"
    efi_sectors: "{{ ((efi_size_bytes | int) / (installation_disk.sectorsize | int)) | int }}"

- name: Set swap partition info
  ansible.builtin.set_fact:
    swap_start_sector: "{{ (efi_start_sector | int) + (efi_sectors | int) | int }}"
    swap_sectors: "{{ ((swap_size_bytes | int) / (installation_disk.sectorsize | int)) | int }}"

- name: Set root partition info
  ansible.builtin.set_fact:
    root_start_sector: "{{ (swap_start_sector | int) + (swap_sectors | int) | int }}"

- name: Partition the device
  ansible.builtin.shell:
    cmd: |
      echo "label: gpt" | sfdisk {{ installation_device }} && \
        echo "{{ efi_start_sector }} {{ efi_sectors }} U -" | sfdisk {{ installation_device }} --append && \
        echo "{{ swap_start_sector }} {{ swap_sectors }} S -" | sfdisk {{ installation_device }} --append && \
        echo "{{ root_start_sector }} - L -" | sfdisk {{ installation_device }} --append

- name: Set partition info
    ansible.builtin.set_fact:
      partition_info:
        efi: "/dev/{{ installation_device }}1"
        swap: "/dev/{{ installation_device }}2"
        root: "/dev/{{ installation_device }}3"

- name: Format the partitions
  ansible.builtin.shell:
    cmd: |
      mkfs -t vfat {{ partition_info.efi }} && \
      mkswap {{ partition_info.swap }} && \
      mkfs -t ext4 -F {{ partition_info.root }}

- name: Execute partprobe
  ansible.builtin.shell:
    cmd: |
      partprobe
